"""change user id type

Revision ID: 2d2b821846a4
Revises: 2967a15e053f
Create Date: 2025-01-31 13:06:59.407463

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2d2b821846a4'
down_revision: Union[str, None] = '2967a15e053f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""
        DO $$ BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'pgcrypto') THEN
                CREATE EXTENSION pgcrypto;
            END IF;
        END $$;
    """)
    op.add_column('users', sa.Column('new_id', sa.UUID(), nullable=False, default=sa.text('gen_random_uuid()')))
    op.execute('UPDATE users SET new_id = gen_random_uuid()')  # Or create a custom function to map old IDs to UUIDs
    op.drop_index('ix_users_id', table_name='users')
    op.drop_column('users', 'id')
    op.alter_column('users', 'new_id', new_column_name='id')
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_users_id', table_name='users')
    op.add_column('users', sa.Column('old_id', sa.Integer(), nullable=False))
    op.execute('UPDATE users SET old_id = id')  # Or reverse the UUIDs to integers if needed
    op.drop_column('users', 'id')
    op.alter_column('users', 'old_id', new_column_name='id')
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    # ### end Alembic commands ###
